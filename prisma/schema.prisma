// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Tenant {
  STORE_LAM_MOC
  THICH_TU_LAM
}

model AppMeta {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value String @default("")
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone         String        @unique
  password      String
  name          String
  lastLoggedIn  DateTime?
  phoneVerified Boolean       @default(false)
  roles         AccountRole[]

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

enum AccountRole {
  DEVELOPER
  ADMIN
  STAFF
}

model Customer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  phone    String[]
  name     String
  code     String
  email    String?
  orders   Order[]
  accounts Account[]

  @@index([phone])
}

model Order {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  code              String
  issuedAt          DateTime?
  canceledAt        DateTime?
  status            String?
  packedStatus      String?
  fulfillmentStatus String?
  receivedStatus    String?
  paymentStatus     String?
  returnStatus      String?
  einvoiceStatus    String?
  total             Float
  totalDiscount     Float
  discountReason    String?
  totalTax          Float?
  note              String?
  tags              String[]
  channel           String?

  customer           Customer          @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  customerId         String
  deliveryFee        OrderDeliveryFee? @relation(fields: [orderDeliveryFeeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderDeliveryFeeId String?
  lineItems          OrderLineItem[]
}

model OrderLineItem {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  taxRate                   Float?
  taxAmount                 Float?
  discountValue             Float?
  discountReason            String?
  discountAmount            Float?
  note                      String?
  price                     Float
  quantity                  Float?
  lineAmount                Float?
  distributedDiscountAmount Float?

  product          Product        @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  productId        String
  variant          ProductVariant @relation(fields: [productVariantId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  productVariantId String
  order            Order          @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId          String
}

model Product {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  name        String
  description String?
  tags        String[]
  images      String[]

  productCategoryId String?
  category          ProductCategory? @relation(fields: [productCategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productBrandId    String?
  brand             ProductBrand?    @relation(fields: [productBrandId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productVariants   ProductVariant[]
  orderLineItems    OrderLineItem[]
}

model ProductVariant {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  name        String
  description String?
  sku         String?
  barcode     String?
  unit        String?
  images      String[]

  product           Product          @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId         String
  category          ProductCategory? @relation(fields: [productCategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productCategoryId String?
  brand             ProductBrand?    @relation(fields: [productBrandId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productBrandId    String?
  orderLineItems    OrderLineItem[]
}

model ProductBrand {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  name            String
  isDeleted       Boolean          @default(false)
  products        Product[]
  productVariants ProductVariant[]
}

model ProductCategory {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  name            String
  description     String?
  code            String
  products        Product[]
  productVariants ProductVariant[]
}

model OrderDeliveryFee {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  shippingCostId   String?
  shippingCostName String?
  fee              Float   @default(0)
  orders           Order[]
}
