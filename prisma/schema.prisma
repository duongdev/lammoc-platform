// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Tenant {
  STORE_LAM_MOC
  THICH_TU_LAM
}

model AppMeta {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value String @default("")
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone         String        @unique
  password      String
  name          String
  lastLoggedIn  DateTime?
  phoneVerified Boolean       @default(false)
  roles         AccountRole[]

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

enum AccountRole {
  DEVELOPER
  ADMIN
  STAFF
}

model Customer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  phone          String[]
  name           String
  code           String
  email          String?
  orders         Order[]
  accounts       Account[]
  loyaltyMembers LoyaltyMember[]

  @@index([phone])
}

model Order {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  code              String
  issuedAt          DateTime?
  canceledAt        DateTime?
  status            String?
  packedStatus      String?
  fulfillmentStatus String?
  receivedStatus    String?
  paymentStatus     String?
  returnStatus      String?
  einvoiceStatus    String?
  total             Float
  totalDiscount     Float
  discountReason    String?
  totalTax          Float?
  note              String?
  tags              String[]
  channel           String?
  finalizedOn       DateTime?
  finishedOn        DateTime?
  completedOn       DateTime?
  createInvoice     Boolean   @default(false)

  customer           Customer?           @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  customerId         String?
  deliveryFee        OrderDeliveryFee?   @relation(fields: [orderDeliveryFeeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderDeliveryFeeId String?
  lineItems          OrderLineItem[]
  fulfillments       OrderFulfillment[]
  shippingAddress    ShippingAddress?    @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId  String?
  loyaltyPointEvents LoyaltyPointEvent[]
}

model OrderLineItem {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  taxRate                   Float?
  taxAmount                 Float?
  discountValue             Float?
  discountReason            String?
  discountAmount            Float?
  note                      String?
  price                     Float
  quantity                  Float?
  lineAmount                Float?
  distributedDiscountAmount Float?

  product          Product        @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  productId        String
  variant          ProductVariant @relation(fields: [productVariantId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  productVariantId String
  order            Order          @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId          String
}

model Product {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  name        String
  description String?
  tags        String[]
  images      String[]

  productCategoryId String?
  category          ProductCategory? @relation(fields: [productCategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productBrandId    String?
  brand             ProductBrand?    @relation(fields: [productBrandId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productVariants   ProductVariant[]
  orderLineItems    OrderLineItem[]
}

model ProductVariant {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  name        String
  description String?
  sku         String?
  barcode     String?
  unit        String?
  images      String[]

  product           Product          @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId         String
  category          ProductCategory? @relation(fields: [productCategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productCategoryId String?
  brand             ProductBrand?    @relation(fields: [productBrandId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productBrandId    String?
  orderLineItems    OrderLineItem[]
}

model ProductBrand {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  name            String
  isDeleted       Boolean          @default(false)
  products        Product[]
  productVariants ProductVariant[]
}

model ProductCategory {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  name            String
  description     String?
  code            String
  products        Product[]
  productVariants ProductVariant[]
}

model OrderDeliveryFee {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  shippingCostId   String?
  shippingCostName String?
  fee              Float   @default(0)
  orders           Order[]
}

model OrderFulfillment {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  stockLocationId String?
  code            String
  accountId       String
  partnerId       String?
  shippingAddress String?
  deliveryType    String?
  discountRate    Float     @default(0)
  discountValue   Float     @default(0)
  discountAmount  Float     @default(0)
  total           Float
  totalTax        Float
  totalDiscount   Float
  notes           String?
  packedOn        DateTime?
  receivedOn      DateTime?
  shippedOn       DateTime?
  cancelDate      DateTime?
  status          String?
  paymentStatus   String

  order                      Order                     @relation(fields: [orderId], references: [id])
  orderId                    String
  shipment                   OrderFulfillmentShipment? @relation(fields: [orderFulfillmentShipmentId], references: [id])
  orderFulfillmentShipmentId String?
}

model OrderFulfillmentShipment {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  serviceName                String?
  codAmount                  Float   @default(0)
  freightAmount              Float   @default(0)
  deliveryFee                Float   @default(0)
  trackingCode               String?
  trackingUrl                String?
  detail                     String?
  note                       String?
  pushingStatus              String?
  referenceStatus            String?
  referenceStatusExplanation String?
  pushingNote                String?
  collationStatus            String?
  partnerOrderId             String?
  freightPayer               String?
  estimatedDeliveryTime      String?
  sortingCode                String?
  weight                     Float   @default(0)
  length                     Float   @default(0)
  height                     Float   @default(0)
  width                      Float   @default(0)

  shippingAddress           ShippingAddress?         @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId         String?
  orderFulfillments         OrderFulfillment[]
  deliveryServiceProvider   DeliveryServiceProvider? @relation(fields: [deliveryServiceProviderId], references: [id])
  deliveryServiceProviderId String?
}

model ShippingAddress {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  label       String?
  firstName   String?
  lastName    String?
  fullName    String?
  address1    String?
  address2    String?
  email       String?
  phoneNumber String?
  country     String?
  city        String?
  district    String?
  ward        String?
  zipCode     String?
  fullAddress String?

  orderFulfillmentShipments OrderFulfillmentShipment[]
  orders                    Order[]
}

model DeliveryServiceProvider {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  code                       String
  name                       String
  type                       String
  phoneNumber                String?
  email                      String?
  groupName                  String?
  status                     String
  note                       String?
  shipmentCount              Int                        @default(0)
  totalFreightAmount         Float                      @default(0)
  debt                       Float                      @default(0)
  fulfillmentProcessingCount Int                        @default(0)
  freightPayer               String?
  orderFulfillmentShipments  OrderFulfillmentShipment[]
}

model LoyaltyTier {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  name              String
  description       String?
  criteria          String
  minCondition      Float   @default(0)
  discount          Float
  maxDiscountAmount Float
  imageUrl          String?
  totalMembers      Int
  status            Boolean

  members         LoyaltyMember[] @relation("loyalty_member_tier")
  nextTierMembers LoyaltyMember[] @relation("loyalty_member_next_tier")
}

model LoyaltyMember {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  phone                   String
  status                  String
  nextCondition           String?
  nextTierRemainingMoney  Float?
  nextTierRemainingPoints Float?
  lastActivityAt          DateTime?
  points                  Float     @default(0)
  usedPoints              Float     @default(0)
  expireDate              DateTime?
  totalSpent              Float     @default(0)
  lastOrderAt             DateTime?
  totalOrders             Int       @default(0)
  totalUncompletedOrders  Int       @default(0)
  tierSpentPeriod         Float     @default(0)

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  tier          LoyaltyTier @relation("loyalty_member_tier", fields: [loyaltyTierId], references: [id])
  loyaltyTierId String

  nextTier          LoyaltyTier?        @relation("loyalty_member_next_tier", fields: [nextLoyaltyTierId], references: [id])
  nextLoyaltyTierId String?
  pointEvents       LoyaltyPointEvent[]
}

model LoyaltyPointEvent {
  id        String   @id
  createdAt DateTime @default(now())
  syncedAt  DateTime @updatedAt
  tenant    Tenant

  activity     String
  adjustPoints Float   @default(0)
  points       Float   @default(0)
  code         String
  orderCode    String?
  returnPoint  Boolean @default(false)

  member          LoyaltyMember @relation(fields: [loyaltyMemberId], references: [id], onDelete: Cascade)
  loyaltyMemberId String
  order           Order?        @relation(fields: [orderId], references: [id])
  orderId         String?
}
